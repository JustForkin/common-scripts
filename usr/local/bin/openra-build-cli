#!/bin/bash
cd /home/fusion809/GitHub/others/OpenRA || ( printf "/home/fusion809/GitHub/others/OpenRA doesn't exist mate, therefore I am exiting\!" && exit )

export DEST=$HOME/.local
# Check for git
if ! command -v git > /dev/null 2>&1; then
	printf "git not found, please add it to system path, presumably after installing it.\n"
fi

# Check for make
if ! command -v make > /dev/null 2>&1; then
	printf "make is missing, please add it to system path, command -v will likely be after you install it.\n"
fi

# Check for mono
if ! command -v mono > /dev/null 2>&1; then
	printf "mono is missing, please add it to system path, command -v will likely be after you install it.\n"
fi

# Check for Lua 5.1 libraries
if ! find /usr/lib* /lib* -name "liblua*5*1*.so*" -quit > /dev/null 2>&1 ; then
	printf "Lua 5.1 libs are not found in /usr/lib/x86_64-linux-gnu, /lib64 or /usr/lib64. If they are installed somewhere else, but in LD_LIBRARY_PATH, feel free to ignore this warning, otherwise install these libraries please\n"
fi

if ! find /lib* /usr/lib* -name "libopenal*" -quit > /dev/null 2>&1 ; then
	printf "OpenAL libraries not found, please install them.\n" && exit
fi

if ! find /lib* /usr/lib* -name "libSDL2*.so*" -quit > /dev/null 2>&1 ; then
	printf "SDL2 libraries are not found, please install them.\n" && exit
fi
#printf "Updating my OpenRA fork...\n"
#git pull upstream bleed -q

#printf "Determining the number of the latest bleed commit..."
#commc=$(git rev-list --branches bleed --count)
#printf "${commc}.\n"

#commn=$(octave --eval "$commc+1" | sed "s/ans =\s*//g")
#printf "Next commit's number will be ${commn}.\n"

#printf "Let's sed to replace the current version listed in mods/*/mod.yaml and VERSION to the $commn.\n"
#sed -i -e "s/Version: [0-9]*/Version: ${commn}/g" mods/*/mod.yaml
#sed -i -e "s/[0-9]*/${commn}/g" VERSION

#printf "Done. Now run make clean to remove build artefacts so we can commit these changes...\n"
#make clean

#printf "Time to do some committng...\n"
#git add --all
#git commit -m "Upstream update"
#printf "Tagging and pushing new release $commn...\n"
#git tag $commn
#git push origin $commn
#printf "Pushing to bleed branch...\n"
commco=$(git rev-list --branches bleed --count)

if [[ -f $DEST/lib/openra/VERSION ]]; then
	VERSION=$(cat $DEST/lib/openra/VERSION)
else
	VERSION="0" && printf "%s\n" "OpenRA doesn't appear to be installed to $HOME/.local, so I'm going to rectify this!"
fi

if [[ $VERSION == "bleed-$commco" ]]; then
	printf "At the latest commit already mate!\n" ; exit
fi

function obuild {
	printf "%s${commco}\n" "OpenRA is going to be updated to commit "
	if ! [[ $1 == "install" ]]; then
		 make clean
	fi
	make version VERSION="bleed-$commco"
	echo "Manually built" | tee -a $DEST/lib/openra/method
	make
	make prefix=/usr install-core DESTDIR=$DEST
	make prefix=/usr install-linux-shortcuts DESTDIR=$DEST
	make prefix=/usr install-linux-mime DESTDIR=$DEST
	make prefix=/usr install-man-page DESTDIR=$DEST
	rm $DEST/lib/openra/*.sh
	git stash
}

if [ -f $DEST/lib/openra/method -o ! -d $DEST/lib/openra ]; then
	obuild "$1"
else
	printf "It would appear OpenRA has been installed via another method, like via a package manager.\nWould you like to install anyway? "
	read -r yn
	case $yn in
		[yY]*)
			obuild "$1";;
		[nN]*)
			printf "Seems like a wise move.\n"
	esac
fi
